// Mocks generated by Mockito 5.4.2 from annotations
// in youtube_portfolio_app/test/data/repositories_impl/app_repositories_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:youtube_portfolio_app/core/error/failure.dart' as _i6;
import 'package:youtube_portfolio_app/data/datasources_impl/app_datasources_impl.dart'
    as _i4;
import 'package:youtube_portfolio_app/data/models/project_model.dart' as _i7;
import 'package:youtube_portfolio_app/domain/usecases/delete_project_by_id.dart'
    as _i9;
import 'package:youtube_portfolio_app/domain/usecases/get_projects_by_filter.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppDataSourcesImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDataSourcesImpl extends _i1.Mock
    implements _i4.AppDataSourcesImpl {
  MockAppDataSourcesImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ProjectModel>>> getProjects() =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjects,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.ProjectModel>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.ProjectModel>>(
          this,
          Invocation.method(
            #getProjects,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ProjectModel>>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ProjectModel>>>
      getProjectsByFilter(_i8.GetProjectsByFilterParam? param) =>
          (super.noSuchMethod(
            Invocation.method(
              #getProjectsByFilter,
              [param],
            ),
            returnValue: _i5
                .Future<_i3.Either<_i6.Failure, List<_i7.ProjectModel>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.ProjectModel>>(
              this,
              Invocation.method(
                #getProjectsByFilter,
                [param],
              ),
            )),
          ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ProjectModel>>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> deleteProjectById(
          _i9.DeleteProjectByIdParam? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProjectById,
          [param],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #deleteProjectById,
            [param],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
